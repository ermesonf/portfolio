plot(v1,v2)
plot(v1,v2,xlab = 'Circunferência(mm)',
ylab = 'Altura(mm)')
plot(v1,v2,xlab = 'Circunferência(mm)',
ylab = 'Altura(mm)',cex.lab=2)
plot(v1,v2,xlab = 'Circunferência(mm)',
ylab = 'Altura(mm)',cex.lab=1)
plot(v1,v2,xlab = 'Circunferência(mm)',
ylab = 'Altura(mm)',cex.lab=1.5)
nrow(available.packages())
search()
library()
nrow(avaolable.library())
nrow(available.library())
##################
library('vegan')
##################
library(vegan)
##################
library("vegan")
##################
install.packages("vegan")
library("vegan")
data("dune")
citation(vegan)
citation("vegan")
citation(R)
citation("R")
citation("dune")
citation(dune)
#MEME
library(memer)
#MEME
install.packages("memer")
library(memer)
library(meme)
#MEME
install.packages("meme")
library(meme)
meme_list()
library(meme)
library(dplyr)
meme_get("AllTheThings") %>%
meme_text_top(txt  = "Queremos dominar o R e depois o mundo!",
font="Impact",
size=22,
strokecolor="black")
meme()
remove.packages("meme")
library(vegan)
library(ape)
install.packages("ape")
library(ape)
install.packages("blogdown")
blogdown::install_hugo()
blogdown::install_hugo()
version
# Carregar o raster e vetor
lulc_ucs <- rast("C:/Users/Ermes/Ermesonfds/Mestrado/IG PPGCA UFPA/Dissertacao/GIS/Raster/mapbiobrc7-uc_zip.tif")
# Carregar os pacotes
library(landscapemetrics)
library(landscapetools)
library(landsca)
# Carregar o raster e vetor
lulc_ucs <- rast("C:/Users/Ermes/Ermesonfds/Mestrado/IG PPGCA UFPA/Dissertacao/GIS/Raster/mapbiobrc7-uc_zip.tif")
# Carregar os pacotes
library(landscapemetrics)
library(landscapetools)
library(terra)
library(raster)
library(rgdal)
library(sp)
library(sf)
# Carregar o raster e vetor
lulc_ucs <- rast("C:/Users/Ermes/Ermesonfds/Mestrado/IG PPGCA UFPA/Dissertacao/GIS/Raster/mapbiobrc7-uc_zip.tif")
plot(lulc_ucs)
ucs <- st_read("C:/Users/Ermes/Ermesonfds/Mestrado/IG PPGCA UFPA/Dissertacao/GIS/Shape/INDEX_VUL/lml_uc_a_reproj_10km.shp")
plot(st_geometry(ucs))
plot(ucs)
plot(lulc_ucs)
plot(ucs, add = T)
plot(lulc_ucs)
plot(st_geometry(ucs), add = T)
# Carregar os pacotes
library(landscapemetrics)
library(landscapetools)
library(terra)
library(raster)
library(rgdal)
library(sp)
library(sf)
# Carregar o raster e vetor
lulc_ucs <- rast("C:/Users/Ermes/Ermesonfds/Mestrado/IG PPGCA UFPA/Dissertacao/GIS/Raster/mapbiobrc7-uc_zip.tif")
plot(lulc_ucs)
ucs <- st_read("C:/Users/Ermes/Ermesonfds/Mestrado/IG PPGCA UFPA/Dissertacao/GIS/Shape/INDEX_VUL/lml_uc_a_reproj_10km.shp")
plot(st_geometry(ucs), add = T)
ucs1 <- head(ucs, 1)
View(ucs1)
# Loop para calcular a métrica para cada feição
for (i in 1:length(ucs1$id)) {
# Selecionar a feição atual
feicao <- ucs1[i, ]
# Extrair a geometria da feição
geom <- st_geometry(feicao)
# Extrair o raster dentro da geometria da feição
lulc_feicao <- crop(lulc_ucs, geom)
# Calcular a métrica lpi para a feição atual
lpi <- lsm_c_lpi(lulc_feicao)
# Criar um data frame com os resultados
df_resultado <- data.frame(id = rep(feicao$id, nrow(lpi)),
classe = rownames(lpi),
valor = as.vector(lpi),
stringsAsFactors = FALSE)
# Armazenar o resultado na lista
resultados[[i]] <- df_resultado
}
View(df_resultado)
# Verificar a projeção atual do raster lulc_ucs
proj_lulc_ucs <- raster::projection(lulc_ucs)
raster::projection(lulc_ucs)
# Verificar a projeção atual do raster lulc_ucs
proj_lulc_ucs <- raster::projection(lulc_ucs)
print(proj_lulc_ucs)
# Verificar a projeção atual do shapefile ucs
proj_ucs <- st_crs(ucs)
print(proj_ucs)
# Definir a projeção de Albers do IBGE
proj_albers_ibge <- "+proj=aea +lat_1=-2 +lat_2=-22 +lat_0=-12 +lon_0=-54 +x_0=0 +y_0=0 +ellps=GRS80 +units=m +no_defs"
# Atualizar a projeção do raster lulc_ucs
projection(lulc_ucs) <- proj_albers_ibge
###########################
# Verificar a projeção atual do raster lulc_ucs
proj_lulc_ucs <- crs(lulc_ucs)
print(proj_lulc_ucs)
# Obter a projeção do raster
proj_raster <- crs(lulc_ucs)
# Obter a projeção do vetor
proj_vetor <- st_crs(ucs)
# Comparar as projeções
if (identical(proj_raster, proj_vetor)) {
print("As projeções são iguais.")
} else {
print("As projeções são diferentes.")
}
# Definir a projeção de Albers do IBGE
proj_albers_ibge <- "+proj=aea +lat_1=-2 +lat_2=-22 +lat_0=-12 +lon_0=-54 +x_0=0 +y_0=0 +ellps=GRS80 +units=m +no_defs"
# Atualizar a projeção do raster lulc_ucs
crs(lulc_ucs) <- proj_albers_ibge
# Atualizar a projeção do shapefile ucs
ucs <- st_set_crs(ucs, proj_albers_ibge)
# Reprojetar o vetor para a nova projeção
ucs <- st_transform(ucs, crs = proj_albers_ibge)
# Verificar a projeção atualizada do shapefile ucs
proj_ucs_updated <- st_crs(ucs)
print(proj_ucs_updated)
# Obter a projeção do vetor
proj_vetor <- st_crs(ucs)
# Obter a projeção do raster
proj_raster <- crs(lulc_ucs)
# Comparar as projeções
if (identical(proj_raster, proj_vetor)) {
print("As projeções são iguais.")
} else {
print("As projeções são diferentes.")
}
# Reprojetar o raster para a nova projeção
lulc_ucs <- projectRaster(lulc_ucs, crs = proj_albers_ibge)
ucs1 <- head(ucs, 1)
##########################
# Criar uma lista vazia para armazenar os resultados
resultados <- list()
# Loop para calcular a métrica para cada feição
for (i in 1:length(ucs1$id)) {
# Selecionar a feição atual
feicao <- ucs1[i, ]
# Extrair a geometria da feição
geom <- st_geometry(feicao)
# Extrair o raster dentro da geometria da feição
lulc_feicao <- crop(lulc_ucs, geom)
# Calcular a métrica lpi para a feição atual
lpi <- lsm_c_lpi(lulc_feicao)
# Criar um data frame com os resultados
df_resultado <- data.frame(id = rep(feicao$id, nrow(lpi)),
classe = rownames(lpi),
valor = as.vector(lpi),
stringsAsFactors = FALSE)
# Armazenar o resultado na lista
resultados[[i]] <- df_resultado
}
# Juntar os resultados em um único data frame
df_resultados <- do.call(rbind, resultados)
View(df_resultado)
View(df_resultados)
# Escrever o data frame em um arquivo CSV
diretorio <- file.choose()
# Escrever o data frame em um arquivo CSV
diretorio <- file.choose()
install.packages("scales")
install.packages("scales")
library(scales)
# Exemplo de valores
x <- c(10, 20, 30, 40, 50)  # Valores que deseja normalizar
# Aplicar a normalização utilizando a função rescale()
norma <- rescale(x)
# Imprimir os valores normalizados
print(normalized)
# Imprimir os valores normalizados
print(norma)
library(tidyverse)
RJ <- microdatasus::fetch_datasus(information_system = "SIH-RJ",
year_start = 2023, year_end = 2023,
month_start = 01, month_end = 06,
uf = "PA",
vars = c("N_AIH", "ESPEC", "IDENT",
"MUNIC_RES", "NASC", "SEXO",
"UTI_MES_TO", "MARCA_UTI",
"DIAR_ACOM","PROC_REA",
"VAL_TOT","DT_INTER", "DT_SAIDA",
"DIAG_PRINC", "GESTAO",
"COD_IDADE", "IDADE",
"DIAS_PERM", "MORTE", "NACIONAL",
"CAR_INT", "CNES",
"COMPLEX", "FINANC", "REMESSA"))
View(RJ)
RJ <- microdatasus::fetch_datasus(information_system = "SIH-RJ",
year_start = 2023, year_end = 2023,
month_start = 01, month_end = 06,
uf = "PA",
vars = c("N_AIH", "ESPEC", "IDENT",
"MUNIC_RES","MUNIC_MOV","NASC", "SEXO",
"UTI_MES_TO", "MARCA_UTI",
"DIAR_ACOM","PROC_REA",
"VAL_TOT","DT_INTER", "DT_SAIDA",
"DIAG_PRINC", "GESTAO",
"COD_IDADE", "IDADE",
"DIAS_PERM", "MORTE", "NACIONAL",
"CAR_INT", "CNES",
"COMPLEX", "FINANC", "REMESSA"))
class(RJ$MUNIC_MOV)
# filtrando
rj_belem <- RJ |>
filter(MUNIC_MOV == "150140")
View(rj_belem)
#
rj_belem %>% summarise(Total_AIH = nrow(RJ),
Valor_AIH = sum(VAL_TOT))
install.packages("DescTools")
DescTools::Desc(rj_belem$N_AIH, plotit = FALSE)
#
rj_belem %>% summarise(Total_AIH = nrow(RJ),
Valor_AIH = sum(VAL_TOT))
# Removendo as duplicidades descobrimos um valor indevido excedente
# de R$ 3.504.149 (18% maior), ao comparar com os valores anteriores:
rj_belem_a <- rj_belem |> distinct(N_AIH, .keep_all = TRUE)
rj_belem_a %>% summarise(Total_AIH = nrow(rj_belem_a),
Valor_AIH = sum(VAL_TOT))
3896605-3773351
19839093-16334944
(19839093-16334944)/19839093
(3896605-3773351)/3896605
0.0316*100
View(rj_belem_a)
View(rj_belem)
library(magrittr)
magrittr::get_pipes()
magrittr::set_names()
set_pipe("⇒")
# lendo db com duckdb
library(duckdb)
# lendo db com duckdb
library(duckdb)
install.packages("duckdb")
library(here)
library(fs)
library(duckdb)
library(dplyr)
library(here)
library(fs)
library(here)
here()
here::set_here()
here::set_here("G:G:/Meu Drive/Epidemiologia Espacial/GIS/Tabela")
here::set_here("G:\Meu Drive\Epidemiologia Espacial\GIS\Tabela")
here::set_here("G:/Meu Drive/Epidemiologia Espacial/GIS/Tabela")
con <- DBI::dbConnect(
drv = duckdb::duckdb(),
dbdir = here::here("BASE - GERAL CODIFICADA", "base.duckdb"),
read_only = FALSE
)
here()
setwd("G:/Meu Drive/Epidemiologia Espacial/GIS/Tabela")
here()
here::dr_here()
con <- DBI::dbConnect(
drv = duckdb::duckdb(),
dbdir = here::here("BASE - GERAL CODIFICADA", "base.duckdb"),
read_only = FALSE
)
con <- DBI::dbConnect(
drv = duckdb::duckdb(),
dbdir = here::dr_here("BASE - GERAL CODIFICADA", "base.duckdb"),
read_only = FALSE
)
con <- DBI::dbConnect(
drv = duckdb::duckdb(),
dbdir = here::here("G:/Meu Drive/Epidemiologia Espacial/GIS/Tabela/BASE - GERAL CODIFICADA",
"base.duckdb"),
read_only = FALSE
)
con <- DBI::dbConnect(
drv = duckdb::duckdb(),
dbdir = here::here("G:/Meu Drive/Epidemiologia Espacial/GIS/Tabela/BASE - GERAL CODIFICADA.csv",
"base.duckdb"),
read_only = FALSE
)
here() starts at G:/Meu Drive/Epidemiologia Espacial/GIS/Tabela
con <- DBI::dbConnect(
drv = duckdb::duckdb(),
dbdir = here::here("G:/Meu Drive/Epidemiologia Espacial/GIS/Tabela/BASE - GERAL CODIFICADA.csv",
"base.duckdb"),
read_only = FALSE
)
library(DBI)
con <- DBI::dbConnect(
drv = duckdb::duckdb(),
dbdir = here::here("G:/Meu Drive/Epidemiologia Espacial/GIS/Tabela/BASE - GERAL CODIFICADA.csv",
"base.duckdb"),
read_only = FALSE
)
con <- DBI::dbConnect(
drv = duckdb::duckdb(),
dbdir = here::here("BASE - GERAL CODIFICADA.csv","base.duckdb"),
read_only = FALSE
)
set_here("G:/Meu Drive/Epidemiologia Espacial/GIS/Tabela/)
set_here("G:/Meu Drive/Epidemiologia Espacial/GIS/Tabela/")
here()
# Defina o arquivo .here no diretório desejado
set_here("G:/Meu Drive/Epidemiologia Espacial/GIS/Tabela/")
# Verifique o diretório de trabalho atual
here()
setwd(here("G:/Meu Drive/Epidemiologia Espacial/GIS/Tabela/"))
here()
getwd()
con <- DBI::dbConnect(
drv = duckdb::duckdb(),
dbdir = getwd("BASE - GERAL CODIFICADA.csv","base.duckdb"),
read_only = FALSE
)
con <- DBI::dbConnect(
drv = duckdb::duckdb(),
dbdir = ("G:/Meu Drive/Epidemiologia Espacial/GIS/Tabela/BASE - GERAL CODIFICADA","base.duckdb"),
con <- DBI::dbConnect(
drv = duckdb::duckdb(),
dbdir = ("G:/Meu Drive/Epidemiologia Espacial/GIS/Tabela/BASE - GERAL CODIFICADA.CSV","base.duckdb"),
con <- DBI::dbConnect(
drv = duckdb::duckdb(),
dbdir = ("G:/Meu Drive/Epidemiologia Espacial/GIS/Tabela/BASE - GERAL CODIFICADA.csv","base.duckdb"),
con <- DBI::dbConnect(
drv = duckdb::duckdb(),
dbdir = ("base_duckdb","base.duckdb"),
dir <- "G:/Meu Drive/Epidemiologia Espacial/GIS/Tabela"
con <- DBI::dbConnect(
drv = duckdb::duckdb(),
dbdir = here("temp","base.duckdb"),
read_only = FALSE
)
rm(dir)
rm(RJ)
rm(rj_belem)
rm(rj_belem_a)
# Caso você esteja criando o conjunto de dados pela primeira vez,
# certamente irá querer escrever uma tabela na base eleicoes.duckdb.
# Se já tem a tabela escrita, comente o código logo abaixo:
duckdb::read_csv_duckdb(
conn = con,
files = "temp/base.csv",
tablename = "base"
)
here()
setwd(here())
here()
setwd()
getwd()
# Caso você esteja criando o conjunto de dados pela primeira vez,
# certamente irá querer escrever uma tabela na base eleicoes.duckdb.
# Se já tem a tabela escrita, comente o código logo abaixo:
duckdb::read_csv_duckdb(
conn = con,
files = "temp/base.csv",
tablename = "base"
)
duckdb::duckdb_read_csv(
conn = con,
files = "temp/base.csv"
)
duckdb::duckdb_read_csv(
conn = con,files = "base",header = T,sep = ";"
)
duckdb::duckdb_read_csv(
conn = con,files = "base.csv",header = T,sep = ";"
)
duckdb::duckdb_read_csv(
conn = con,files = ".temp/base.csv",header = T,sep = ";"
)
duckdb::duckdb_read_csv(
conn = con,files = "temp/base.csv",header = T,sep = ";"
)
duckdb::duckdb_read_csv(
conn = con,files = "temp/base.csv",header = T,sep = ";",col.names = T
)
duckdb::duckdb_read_csv(
conn = con,files = "temp/base.csv",header = T,col.names = T,delim = ";"
)
duckdb::duckdb_read_csv(
conn = con,files = "temp/base.csv",header = T,col.names = T,delim = ";",encoding = "UTF-8"
)
duckdb::duckdb_read_csv(
conn = con,files = "temp/base.csv",header = T,col.names = T,delim = ";",encoding = "latin-1"
)
# Caso você esteja criando o conjunto de dados pela primeira vez,
# certamente irá querer escrever uma tabela na base eleicoes.duckdb.
# Se já tem a tabela escrita, comente o código logo abaixo:
duckdb::read_csv_duckdb(
conn = con,
files = "temp/base.csv",
tablename = "base"
)
duckdb::duckdb_read_csv(
conn = con,files = "temp/base.csv",header = T,col.names = T,delim = ",",
encoding = "latin-1"
)
duckdb::duckdb_read_csv(
conn = con,files = "temp/base.csv",header = T,col.names = T,delim = ",",
encoding = "latin-1"
)
duckdb::duckdb_read_csv(
conn = con,files = "temp/base.csv",header = T,col.names = T,delim = ";",
encoding = "latin-1"
)
duckdb::duckdb_read_csv(
conn = con,files = "temp/base.csv",header = T,col.names = T,delim = ",",
encoding = "latin-1"
)
duckdb::duckdb_read_csv(
conn = con,files = "temp/base.csv",header = T,col.names = T,delim = ",",
encoding = "utf-8"
)
duckdb::duckdb_read_csv(
conn = con,files = "temp/base.csv",header = T,col.names = T,delim = ";",
encoding = "utf-8"
)
duckdb::duckdb_read_csv(
conn = con,files = "temp/base.csv",header = T,col.names = F,delim = ";",
encoding = "utf-8"
)
duckdb::duckdb_read_csv(
conn = con,files = "temp/base.csv",header = T,delim = ";",
encoding = "utf-8"
)
duckdb::duckdb_read_csv(
conn = con,files = "temp/base.csv",header = T,delim = ";",
encoding = "UTF-8"
)
duckdb::duckdb_read_csv(
conn = con,files = "temp/base.csv",header = T,delim = ";",
encoding = "Windows-1252"
)
duckdb_read_csv(con, "base","base.csv",
header = TRUE)
duckdb_read_csv(con, "base","temp/base.csv",
header = TRUE)
duckdb_read_csv(con, "base","temp/base.csv",delim = ","
header = TRUE)
duckdb_read_csv(con, "base","temp/base.csv",delim = ",",
header = TRUE)
duckdb_read_csv(con, "base","temp/base.csv",delim = ";",
header = TRUE)
duckdb_read_csv(con, "base","temp/base.csv",delim = ";",
header = TRUE, Encoding("latin1"))
duckdb_read_csv(con, "base","temp/base.csv",delim = ";",
header = TRUE, Encoding("Latin-1"))
duckdb_read_csv(con, "base","temp/base.csv",delim = ";",
header = TRUE, Encoding("latin-1"))
duckdb_read_csv(con, "base","temp/base.csv",delim = ";",
header = TRUE, Encoding("UTF-8"))
duckdb_read_csv(con, "base","temp/base.csv",delim = ";",
header = TRUE, encoding = "utf-8")
duckdb_read_csv(con, "base","temp/base.csv",delim = ";",
header = TRUE, encoding = "UTF-8")
duckdb_read_csv(con, "base","temp/base.csv",delim = ";",
header = TRUE, encoding = "latin-1")
duckdb_read_csv(con, "base","temp/base.csv",delim = ";",
header = TRUE, check.names = F)
duckdb_read_csv(con, "base","temp/base.csv",delim = ";",
header = TRUE, check.names = T)
duckdb_read_csv(con, "base","temp/base.csv",delim = ";",
header = TRUE, check.names = T, unique = F)
duckdb_read_csv(con, "base","temp/base.csv",delim = ";",
header = TRUE, check.names = T, unique = T)
duckdb_read_csv(con, "base","temp/base.csv",delim = ";",
header = TRUE, check.names = T, col.names = F)
duckdb_read_csv(con, "base","temp/base.csv",delim = ";",
header = TRUE,  fileEncoding = "Latin1", check.names = F)
duckdb_read_csv(con, "base","temp/base.csv",
delim = ";",
header = TRUE,
#fileEncoding = "Latin1",
check.names = F)
setwd("C:/Users/Ermes/Documents")
install.packages(c("acepack", "admisc", "arrow", "audio", "blogdown", "bookdown", "brms", "broom", "broom.helpers", "bslib", "cachem", "carrier", "checkmate", "chron", "clock", "clubSandwich", "colourpicker", "cpp11", "crul", "curl", "datamods", "datawizard", "dbplyr", "deldir", "DEoptimR", "deSolve", "digest", "downlit", "dplyr", "DT", "duckdb", "effectsize", "ellipse", "emmeans", "evaluate", "fastDummies", "fontawesome", "fs", "future", "future.apply", "gamlss.dist", "gargle", "gdata", "geometries", "gert", "ggdist", "ggeffects", "ggplot2", "googledrive", "googlesheets4", "GPArotation", "graphlayouts", "gtable", "gtsummary", "h2o", "haven", "Hmisc", "htmltools", "httpuv", "httr", "httr2", "igraph", "insight", "jsonlite", "jtools", "keras", "knitr", "ks", "labeling", "labelled", "Lahman", "landscapemetrics", "later", "lavaan", "leaflet.providers", "lintr", "lme4", "lmeInfo", "lmom", "logcondens", "logspline", "lwgeom", "magick", "maptools", "markdown", "Matrix", "MatrixModels", "matrixStats", "mc2d", "mda", "metafor", "mice", "microbenchmark", "mlbench", "mlflow", "multcomp", "mvtnorm", "nlme", "nonnest2", "openssl", "osmdata", "overdisp", "parallelly", "parameters", "parsnip", "patchwork", "pbapply", "performance", "phosphoricons", "pkgbuild", "pkgload", "plotly", "pls", "polspline", "pROC", "processx", "prodlim", "profvis", "progressr", "proj4", "promises", "ps", "pscl", "psych", "psychTools", "purrr", "qqconf", "quantmod", "quantreg", "qvcalc", "raster", "Rcpp", "RcppArmadillo", "read.dbc", "readODS", "readxl", "recipes", "remotes", "reticulate", "rgdal", "rgl", "rio", "rlang", "rmarkdown", "rmcorr", "rms", "robustbase", "rsample", "rstantools", "rstudioapi", "s2", "sass", "scatterplot3d", "see", "segmented", "seriation", "servr", "sf", "sfheaders", "sfsmisc", "shiny", "showtext", "sjPlot", "smooth", "snakecase", "sp", "sparklyr", "spData", "splancs", "StanHeaders", "stars", "statnet.common", "stringi", "styler", "subselect", "survey", "sys", "tables", "tensorflow", "terra", "testthat", "TH.data", "themis", "tinytex", "TMB", "tseries", "tsfeatures", "twosamples", "tzdb", "ucminf", "units", "usethis", "uuid", "V8", "vctrs", "vdiffr", "viridis", "viridisLite", "vroom", "waldo", "wdm", "webshot", "wk", "xfun", "xml2", "xts", "zip", "zoo"))
setwd("C:/Users/Ermes/portfolio")
